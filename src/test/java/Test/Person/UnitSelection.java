package Test.Person;

import java.io.IOException;

import org.apache.poi.EncryptedDocumentException;
import org.testng.Assert;
import org.testng.annotations.Test;

import Base.BaseClass;
import Utility.ExcleReader;
import Utility.UtilClass;

public class UnitSelection extends BaseClass {
	String substring;

	@Test(description = "Verify that the opporites genrated when the user fill the all the meditory dropdown")
	public void T001() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring);
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","mobile number code"),BaseClass.jsonArrayValue("DropDown Values","mobile number code value"));
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, BaseClass.jsonArrayValue("Asserations","user logoutButton"));
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1,BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus,BaseClass.jsonArrayValue("Asserations","Lead Status in process"));
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status,BaseClass.jsonArrayValue("Asserations","Converted lead Status"));
		adminLead.globalSearchLeadName(substring);
		unitSel.refreshPage();
		unitSel.clickOnOpp();
		boolean opp = leads.unitSearch();
		Assert.assertEquals(opp, true);
		logoutUserFromSandBox.logoutUser();
	}

	
	@Test(description="Verify user able to add the all medentory feilds in the account ")
	public void T002() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring);
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","mobile number code"),BaseClass.jsonArrayValue("DropDown Values","mobile number code value"));
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, BaseClass.jsonArrayValue("Asserations","user logoutButton"));
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1,BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus,BaseClass.jsonArrayValue("Asserations","Lead Status in process"));
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status,BaseClass.jsonArrayValue("Asserations","Converted lead Status"));
		adminLead.globalSearchLeadName(substring);
		System.out.println(substring);
		leads.clickOnTheAccountLinkAfterGobalSearch();
		unitSel.accountClcikInOpp();
		String gender = unitSel.genderSelection();
		Assert.assertEquals(gender, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","gender selection"),BaseClass.jsonArrayValue("DropDown Values","gender selection value"));
		unitSel.addDetailsInAccounts("01/05/1789", "Date of Birth", "PersonBirthdate");
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","marital Status"),BaseClass.jsonArrayValue("DropDown Values","marital status value"),BaseClass.jsonArrayValue("Sang values","marital status sang value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","residential status"),BaseClass.jsonArrayValue("DropDown Values","residentail status value"),BaseClass.jsonArrayValue("Sang values","residental status sang value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","passport type value"),BaseClass.jsonArrayValue("Sang value input","Passport value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","place of issue"),BaseClass.jsonArrayValue("Sang value input","PlaceofIssue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport issue"),BaseClass.jsonArrayValue("Sang values","Passport Issue"),BaseClass.jsonArrayValue("Sang value input","Passport issue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport expiry"),BaseClass.jsonArrayValue("Sang values","Passport Expiry"),BaseClass.jsonArrayValue("Sang value input","Passport Expiry Date value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","Passport num"), BaseClass.jsonArrayValue("Sang value input","Passport Number value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","employmet status"),BaseClass.jsonArrayValue("DropDown Values","employmet status value"),BaseClass.jsonArrayValue("Sang values","employmet sang value"));
		unitSel.addressUpdate(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.textAreaAddressInput(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","postal"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","Type of city"));
		String relationshipText = unitSel.saveInfo();
		Assert.assertEquals(relationshipText, "Relationships");
		logoutUserFromSandBox.logoutUser();
	}
	@Test(description = "Verify exclamation mark near reserve unit button disappears after entering all the mandatory details.")
	public void T003() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring);
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","mobile number code"),BaseClass.jsonArrayValue("DropDown Values","mobile number code value"));
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, BaseClass.jsonArrayValue("Asserations","user logoutButton"));
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1,BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus,BaseClass.jsonArrayValue("Asserations","Lead Status in process"));
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status,BaseClass.jsonArrayValue("Asserations","Converted lead Status"));
		adminLead.globalSearchLeadName(substring);
		System.out.println(substring);
		leads.clickOnTheAccountLinkAfterGobalSearch();
		unitSel.accountClcikInOpp();
		String gender = unitSel.genderSelection();
		Assert.assertEquals(gender, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","gender selection"),BaseClass.jsonArrayValue("DropDown Values","gender selection value"));
		unitSel.addDetailsInAccounts("01/05/1789", "Date of Birth", "PersonBirthdate");
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","marital Status"),BaseClass.jsonArrayValue("DropDown Values","marital status value"),BaseClass.jsonArrayValue("Sang values","marital status sang value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","residential status"),BaseClass.jsonArrayValue("DropDown Values","residentail status value"),BaseClass.jsonArrayValue("Sang values","residental status sang value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","passport type value"),BaseClass.jsonArrayValue("Sang value input","Passport value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","place of issue"),BaseClass.jsonArrayValue("Sang value input","PlaceofIssue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport issue"),BaseClass.jsonArrayValue("Sang values","Passport Issue"),BaseClass.jsonArrayValue("Sang value input","Passport issue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport expiry"),BaseClass.jsonArrayValue("Sang values","Passport Expiry"),BaseClass.jsonArrayValue("Sang value input","Passport Expiry Date value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","Passport num"), BaseClass.jsonArrayValue("Sang value input","Passport Number value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","employmet status"),BaseClass.jsonArrayValue("DropDown Values","employmet status value"),BaseClass.jsonArrayValue("Sang values","employmet sang value"));
		unitSel.addressUpdate(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.textAreaAddressInput(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","postal"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","Type of city"));
		String relationshipText = unitSel.saveInfo();
		Assert.assertEquals(relationshipText, "Relationships");
		unitSel.relationship();
		unitSel.uploadDocuments("National ID Back Copy", "3");
		unitSel.uploadDocuments("National ID Front Copy", "4");
		unitSel.uploadDocuments("Passport Copy", "6");
		unitSel.uploadDocuments("Signed KYC Form", "7");
		adminLead.globalSearchLeadName(substring);
		unitSel.detailsInOpporties();
		Assert.assertEquals(unitSel.salesTypesText(), true);
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Sale Type"),BaseClass.jsonArrayValue("DropDown Values","sales types value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Deal Type"),BaseClass.jsonArrayValue("DropDown Values","Deal Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Booking Type"),BaseClass.jsonArrayValue("DropDown Values","Booking Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Agent Type"),BaseClass.jsonArrayValue("DropDown Values","Agent Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Delivery Method"),BaseClass.jsonArrayValue("DropDown Values","Delivery Method value"));
		unitSel.saveButton();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		boolean exlmetoryMark = leads.unitSearch();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		leads.unitSearch();
		logoutUserFromSandBox.logoutUser();
	}
	@Test(description="Verify the user able to click on the view All button for the document upload")
	public void T004() throws InterruptedException, EncryptedDocumentException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring);
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","mobile number code"),BaseClass.jsonArrayValue("DropDown Values","mobile number code value"));
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, BaseClass.jsonArrayValue("Asserations","user logoutButton"));
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1,BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus,BaseClass.jsonArrayValue("Asserations","Lead Status in process"));
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status,BaseClass.jsonArrayValue("Asserations","Converted lead Status"));
		adminLead.globalSearchLeadName(substring);
		System.out.println(substring);
		leads.clickOnTheAccountLinkAfterGobalSearch();
		unitSel.accountClcikInOpp();
		String gender = unitSel.genderSelection();
		Assert.assertEquals(gender, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","gender selection"),BaseClass.jsonArrayValue("DropDown Values","gender selection value"));
		unitSel.addDetailsInAccounts("01/05/1789", "Date of Birth", "PersonBirthdate");
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","marital Status"),BaseClass.jsonArrayValue("DropDown Values","marital status value"),BaseClass.jsonArrayValue("Sang values","marital status sang value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","residential status"),BaseClass.jsonArrayValue("DropDown Values","residentail status value"),BaseClass.jsonArrayValue("Sang values","residental status sang value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","passport type value"),BaseClass.jsonArrayValue("Sang value input","Passport value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","place of issue"),BaseClass.jsonArrayValue("Sang value input","PlaceofIssue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport issue"),BaseClass.jsonArrayValue("Sang values","Passport Issue"),BaseClass.jsonArrayValue("Sang value input","Passport issue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport expiry"),BaseClass.jsonArrayValue("Sang values","Passport Expiry"),BaseClass.jsonArrayValue("Sang value input","Passport Expiry Date value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","Passport num"), BaseClass.jsonArrayValue("Sang value input","Passport Number value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","employmet status"),BaseClass.jsonArrayValue("DropDown Values","employmet status value"),BaseClass.jsonArrayValue("Sang values","employmet sang value"));
		unitSel.addressUpdate(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.textAreaAddressInput(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","postal"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","Type of city"));
		String relationshipText = unitSel.saveInfo();
		Assert.assertEquals(relationshipText, "Relationships");
		unitSel.relationship();
		logoutUserFromSandBox.logoutUser();
	}
	@Test(description = "Verify \"Add to Cart\" is getting highlighted with number of units selected.",dependsOnMethods="T003")
	public void T005() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		leads.unitSearch();
		unitSel.dropdownFromDetailsHandle("Projects, Select an Option", "MoonTown");
		Assert.assertEquals(unitSel.addToCart(),"1");
		logoutUserFromSandBox.logoutUser();
	}
	@Test(description = "Verify if Valid data is getting filtered and visible after entering the details in Unit search.",dependsOnMethods="T003")
	public void T006() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		leads.unitSearch();
		unitSel.dropdownFromDetailsHandle("Projects, Select an Option", "MoonTown");
		unitSel.unitFilterData();
		logoutUserFromSandBox.logoutUser();
	}

	@Test(description = "Verify exclamation mark near reserve unit button not dissappared after document not uploaded")
	public void T007() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring);
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","mobile number code"),BaseClass.jsonArrayValue("DropDown Values","mobile number code value"));
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, BaseClass.jsonArrayValue("Asserations","user logoutButton"));
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1,BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus,BaseClass.jsonArrayValue("Asserations","Lead Status in process"));
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status,BaseClass.jsonArrayValue("Asserations","Converted lead Status"));
		adminLead.globalSearchLeadName(substring);
		System.out.println(substring);
		leads.clickOnTheAccountLinkAfterGobalSearch();
		unitSel.accountClcikInOpp();
		String gender = unitSel.genderSelection();
		Assert.assertEquals(gender, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","gender selection"),BaseClass.jsonArrayValue("DropDown Values","gender selection value"));
		unitSel.addDetailsInAccounts("01/05/1789", "Date of Birth", "PersonBirthdate");
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","marital Status"),BaseClass.jsonArrayValue("DropDown Values","marital status value"),BaseClass.jsonArrayValue("Sang values","marital status sang value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","residential status"),BaseClass.jsonArrayValue("DropDown Values","residentail status value"),BaseClass.jsonArrayValue("Sang values","residental status sang value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","passport type value"),BaseClass.jsonArrayValue("Sang value input","Passport value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","place of issue"),BaseClass.jsonArrayValue("Sang value input","PlaceofIssue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport issue"),BaseClass.jsonArrayValue("Sang values","Passport Issue"),BaseClass.jsonArrayValue("Sang value input","Passport issue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport expiry"),BaseClass.jsonArrayValue("Sang values","Passport Expiry"),BaseClass.jsonArrayValue("Sang value input","Passport Expiry Date value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","Passport num"), BaseClass.jsonArrayValue("Sang value input","Passport Number value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","employmet status"),BaseClass.jsonArrayValue("DropDown Values","employmet status value"),BaseClass.jsonArrayValue("Sang values","employmet sang value"));
		unitSel.addressUpdate(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.textAreaAddressInput(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","postal"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","Type of city"));
		String relationshipText = unitSel.saveInfo();
		Assert.assertEquals(relationshipText, "Relationships");
		unitSel.relationship();
		adminLead.globalSearchLeadName(substring);
		unitSel.detailsInOpporties();
		Assert.assertEquals(unitSel.salesTypesText(), true);
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Sale Type"),BaseClass.jsonArrayValue("DropDown Values","sales types value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Deal Type"),BaseClass.jsonArrayValue("DropDown Values","Deal Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Booking Type"),BaseClass.jsonArrayValue("DropDown Values","Booking Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Agent Type"),BaseClass.jsonArrayValue("DropDown Values","Agent Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Delivery Method"),BaseClass.jsonArrayValue("DropDown Values","Delivery Method value"));
		unitSel.saveButton();
		adminLead.globalSearchLeadName(substring);
		unitSel.accountLinkClcikFromTheOpporites();
		receipt.relationsMaking();
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","Relationship Type"),BaseClass.jsonArrayValue("DropDown Values","Relationship Type value"));
		receipt.seletionOfRealtedAccount();
		leads.saveLeadInformation();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		boolean exlmetoryMark = leads.unitSearch();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		leads.unitSearch();
		logoutUserFromSandBox.logoutUser();
	}
	@Test(description = "Verify exclamation mark near reserve unit button not dissappared after document and gender details not uploaded")
	public void T008() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring);
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","mobile number code"),BaseClass.jsonArrayValue("DropDown Values","mobile number code value"));
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, BaseClass.jsonArrayValue("Asserations","user logoutButton"));
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1,BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus,BaseClass.jsonArrayValue("Asserations","Lead Status in process"));
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status,BaseClass.jsonArrayValue("Asserations","Converted lead Status"));
		adminLead.globalSearchLeadName(substring);
		System.out.println(substring);
		leads.clickOnTheAccountLinkAfterGobalSearch();
		unitSel.accountClcikInOpp();
		String gender = unitSel.genderSelection();
		Assert.assertEquals(gender, "--None--");
		unitSel.relationship();
		adminLead.globalSearchLeadName(substring);
		unitSel.detailsInOpporties();
		Assert.assertEquals(unitSel.salesTypesText(), true);
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Sale Type"),BaseClass.jsonArrayValue("DropDown Values","sales types value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Deal Type"),BaseClass.jsonArrayValue("DropDown Values","Deal Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Booking Type"),BaseClass.jsonArrayValue("DropDown Values","Booking Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Agent Type"),BaseClass.jsonArrayValue("DropDown Values","Agent Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Delivery Method"),BaseClass.jsonArrayValue("DropDown Values","Delivery Method value"));
		unitSel.saveButton();
		adminLead.globalSearchLeadName(substring);
		unitSel.accountLinkClcikFromTheOpporites();
		receipt.relationsMaking();
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","Relationship Type"),BaseClass.jsonArrayValue("DropDown Values","Relationship Type value"));
		receipt.seletionOfRealtedAccount();
		leads.saveLeadInformation();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		boolean exlmetoryMark = leads.unitSearch();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		leads.unitSearch();
		unitSel.selectionOftheUnit(BaseClass.jsonArrayValue("DropDown","Projects"),BaseClass.jsonArrayValue("DropDown Values","Projects value"));
		unitSel.dropDownSelectionUnit();
		logoutUserFromSandBox.logoutUser();
	}
	@Test(description = "Verify exclamation mark near reserve unit button not dissappared after document and gender details ,sales type not uploaded")
	public void T009() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring);
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","mobile number code"),BaseClass.jsonArrayValue("DropDown Values","mobile number code value"));
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, BaseClass.jsonArrayValue("Asserations","user logoutButton"));
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1,BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus,BaseClass.jsonArrayValue("Asserations","Lead Status in process"));
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status,BaseClass.jsonArrayValue("Asserations","Converted lead Status"));
		
		String relationshipText = unitSel.saveInfo();
		Assert.assertEquals(relationshipText, "Relationships");
		unitSel.relationship();
		unitSel.uploadDocuments("National ID Back Copy", "3");
		unitSel.uploadDocuments("National ID Front Copy", "4");
		unitSel.uploadDocuments("Passport Copy", "6");
		unitSel.uploadDocuments("Signed KYC Form", "7");
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		boolean exlmetoryMark = leads.unitSearch();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		leads.unitSearch();
	
		logoutUserFromSandBox.logoutUser();
	}
	@Test(description = "Verify exclamation mark near reserve unit button appears after entering all and the mandatory details skip one documet .")
	public void T0010() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring);
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","mobile number code"),BaseClass.jsonArrayValue("DropDown Values","mobile number code value"));
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, BaseClass.jsonArrayValue("Asserations","user logoutButton"));
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1,BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus,BaseClass.jsonArrayValue("Asserations","Lead Status in process"));
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status,BaseClass.jsonArrayValue("Asserations","Converted lead Status"));
		adminLead.globalSearchLeadName(substring);
		System.out.println(substring);
		leads.clickOnTheAccountLinkAfterGobalSearch();
		unitSel.accountClcikInOpp();
		String gender = unitSel.genderSelection();
		Assert.assertEquals(gender, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","gender selection"),BaseClass.jsonArrayValue("DropDown Values","gender selection value"));
		unitSel.addDetailsInAccounts("01/05/1789", "Date of Birth", "PersonBirthdate");
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","marital Status"),BaseClass.jsonArrayValue("DropDown Values","marital status value"),BaseClass.jsonArrayValue("Sang values","marital status sang value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","residential status"),BaseClass.jsonArrayValue("DropDown Values","residentail status value"),BaseClass.jsonArrayValue("Sang values","residental status sang value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","passport type value"),BaseClass.jsonArrayValue("Sang value input","Passport value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","place of issue"),BaseClass.jsonArrayValue("Sang value input","PlaceofIssue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport issue"),BaseClass.jsonArrayValue("Sang values","Passport Issue"),BaseClass.jsonArrayValue("Sang value input","Passport issue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport expiry"),BaseClass.jsonArrayValue("Sang values","Passport Expiry"),BaseClass.jsonArrayValue("Sang value input","Passport Expiry Date value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","Passport num"), BaseClass.jsonArrayValue("Sang value input","Passport Number value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","employmet status"),BaseClass.jsonArrayValue("DropDown Values","employmet status value"),BaseClass.jsonArrayValue("Sang values","employmet sang value"));
		unitSel.addressUpdate(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.textAreaAddressInput(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","postal"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","Type of city"));
		String relationshipText = unitSel.saveInfo();
		Assert.assertEquals(relationshipText, "Relationships");
		unitSel.relationship();
		unitSel.uploadDocuments("National ID Back Copy", "3");
		unitSel.uploadDocuments("National ID Front Copy", "4");
		unitSel.uploadDocuments("Passport Copy", "6");
		
		adminLead.globalSearchLeadName(substring);
		unitSel.detailsInOpporties();
		Assert.assertEquals(unitSel.salesTypesText(), true);
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Sale Type"),BaseClass.jsonArrayValue("DropDown Values","sales types value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Deal Type"),BaseClass.jsonArrayValue("DropDown Values","Deal Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Booking Type"),BaseClass.jsonArrayValue("DropDown Values","Booking Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Agent Type"),BaseClass.jsonArrayValue("DropDown Values","Agent Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Delivery Method"),BaseClass.jsonArrayValue("DropDown Values","Delivery Method value"));
		unitSel.saveButton();

		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		boolean exlmetoryMark = leads.unitSearch();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		leads.unitSearch();
		unitSel.selectionOftheUnit(BaseClass.jsonArrayValue("DropDown","Projects"),BaseClass.jsonArrayValue("DropDown Values","Projects value"));
		unitSel.dropDownSelectionUnit();
		logoutUserFromSandBox.logoutUser();
	}
	@Test(description = "Verify exclamation mark near reserve unit button appears after entering all and the mandatory details skip two documents .")
	public void T0011() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring);
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","mobile number code"),BaseClass.jsonArrayValue("DropDown Values","mobile number code value"));
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, BaseClass.jsonArrayValue("Asserations","user logoutButton"));
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1,BaseClass.jsonArrayValue("Asserations","Search Asserations"));
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus,BaseClass.jsonArrayValue("Asserations","Lead Status in process"));
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status,BaseClass.jsonArrayValue("Asserations","Converted lead Status"));
		adminLead.globalSearchLeadName(substring);
		System.out.println(substring);
		leads.clickOnTheAccountLinkAfterGobalSearch();
		unitSel.accountClcikInOpp();
		String gender = unitSel.genderSelection();
		Assert.assertEquals(gender, "--None--");
		leads.withoutSangType(BaseClass.jsonArrayValue("DropDown","gender selection"),BaseClass.jsonArrayValue("DropDown Values","gender selection value"));
		unitSel.addDetailsInAccounts("01/05/1789", "Date of Birth", "PersonBirthdate");
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","marital Status"),BaseClass.jsonArrayValue("DropDown Values","marital status value"),BaseClass.jsonArrayValue("Sang values","marital status sang value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","residential status"),BaseClass.jsonArrayValue("DropDown Values","residentail status value"),BaseClass.jsonArrayValue("Sang values","residental status sang value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","passport type value"),BaseClass.jsonArrayValue("Sang value input","Passport value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","place of issue"),BaseClass.jsonArrayValue("Sang value input","PlaceofIssue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport issue"),BaseClass.jsonArrayValue("Sang values","Passport Issue"),BaseClass.jsonArrayValue("Sang value input","Passport issue value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","Date passport expiry"),BaseClass.jsonArrayValue("Sang values","Passport Expiry"),BaseClass.jsonArrayValue("Sang value input","Passport Expiry Date value"));
		unitSel.addDetailsInAccounts(BaseClass.jsonArrayValue("Update input feild","N/A value"), BaseClass.jsonArrayValue("Sang values","Passport num"), BaseClass.jsonArrayValue("Sang value input","Passport Number value"));
		leads.corrporateWelthName(BaseClass.jsonArrayValue("DropDown","employmet status"),BaseClass.jsonArrayValue("DropDown Values","employmet status value"),BaseClass.jsonArrayValue("Sang values","employmet sang value"));
		unitSel.addressUpdate(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.textAreaAddressInput(BaseClass.jsonArrayValue("Update input feild","N/A value"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","postal"));
		unitSel.setValuesInInputAddress(BaseClass.jsonArrayValue("Update input feild","N/A value"),BaseClass.jsonArrayValue("Sang values","Type of city"));
		String relationshipText = unitSel.saveInfo();
		Assert.assertEquals(relationshipText, "Relationships");
		unitSel.relationship();
		unitSel.uploadDocuments("National ID Back Copy", "3");
		unitSel.uploadDocuments("National ID Front Copy", "4");
		
		adminLead.globalSearchLeadName(substring);
		unitSel.detailsInOpporties();
		Assert.assertEquals(unitSel.salesTypesText(), true);
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Sale Type"),BaseClass.jsonArrayValue("DropDown Values","sales types value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Deal Type"),BaseClass.jsonArrayValue("DropDown Values","Deal Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Booking Type"),BaseClass.jsonArrayValue("DropDown Values","Booking Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Agent Type"),BaseClass.jsonArrayValue("DropDown Values","Agent Type value"));
		unitSel.dropdownFromDetailsHandle(BaseClass.jsonArrayValue("DropDown","Delivery Method"),BaseClass.jsonArrayValue("DropDown Values","Delivery Method value"));
		unitSel.saveButton();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		boolean exlmetoryMark = leads.unitSearch();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		leads.unitSearch();
		unitSel.selectionOftheUnit(BaseClass.jsonArrayValue("DropDown","Projects"),BaseClass.jsonArrayValue("DropDown Values","Projects value"));
		unitSel.dropDownSelectionUnit();
		logoutUserFromSandBox.logoutUser();
	}
	@Test(description = "Verify exclamation mark near reserve unit button appears after entering all and the mandatory details add only one document.")
	public void T0012() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, "Search...");
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring + "{{{{{{{");
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType("Mobile Country Code, --None--", "United Arab Emirates(+971)");
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, "User");
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(ExcleReader.excleReader("Login", 2, 1), ExcleReader.excleReader("Login", 3, 1));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, "Search...");
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus, "In Progress Lead");
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status, "Converted Lead");
		adminLead.globalSearchLeadName(substring);
		System.out.println(substring + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}");
		leads.clickOnTheAccountLinkAfterGobalSearch();
		unitSel.accountClcikInOpp();
		String gender = unitSel.genderSelection();
		Assert.assertEquals(gender, "--None--");
		leads.withoutSangType("Gender, --None--", "Male");
		unitSel.addDetailsInAccounts("01/05/1789", "Date of Birth", "PersonBirthdate");
		leads.corrporateWelthName("Marital Status, --None--", "Single", "Marital Status");
		leads.corrporateWelthName("Residential Address same as Permanent?, --None--", "Yes",
				"Residential Address same as Permanent?");
		unitSel.addDetailsInAccounts("N/A", "Passport Type", "PassportType__pc");
		unitSel.addDetailsInAccounts("N/A", "Place of Issue", "PlaceofIssue__pc");
		unitSel.addDetailsInAccounts("01/05/1989", "Passport Issue Date", "PassportIssueDate__pc");
		unitSel.addDetailsInAccounts("01/05/1990", "Passport Expiry Date", "PassportExpiryDate__pc");
		unitSel.addDetailsInAccounts("N/A", "Passport Number", "PassportNumber__pc");
		leads.corrporateWelthName("Employment Status, --None--", "Unemployed", "Employment Status");
		unitSel.addressUpdate("N/A");
		unitSel.textAreaAddressInput("N/A");
		unitSel.setValuesInInputAddress("N/A", "postalCode");
		unitSel.setValuesInInputAddress("N/A", "city");
		String relationshipText = unitSel.saveInfo();
		Assert.assertEquals(relationshipText, "Relationships");
		unitSel.relationship();
		unitSel.uploadDocuments("National ID Back Copy", "3");
		adminLead.globalSearchLeadName(substring);
		unitSel.detailsInOpporties();
		Assert.assertEquals(unitSel.salesTypesText(), true);
		unitSel.dropdownFromDetailsHandle("Sale Type, --None--", "Land");
		unitSel.dropdownFromDetailsHandle("Deal Type, --None--", "Bulk");
		unitSel.dropdownFromDetailsHandle("Booking Type, --None--", "Online");
		unitSel.dropdownFromDetailsHandle("Agent Type, --None--", "Direct");
		unitSel.dropdownFromDetailsHandle("Delivery Method, --None--", "Email");
		unitSel.saveButton();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		Assert.assertEquals(leads.unitSearch(),true);
		logoutUserFromSandBox.logoutUser();
	}
	@Test(description = "Verify exclamation mark near reserve unit button appears after entering all the mandatory details and add not meditory documents.")
	public void T0013() throws EncryptedDocumentException, InterruptedException, IOException {
		login.loginToSandBox(prop.getProperty("Username"),prop.getProperty("Password"));
		leads.leadCreations("Autmation" + UtilClass.generateRandomNumbers(3),
				"Automation", "Autmation" + UtilClass.generateRandomNumbers(5));
		String lead = leads.leadName();
		leads.taskStatus();
		super.driver.navigate().back();
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(prop.getProperty("AdminUsername"),prop.getProperty("AdminPassword"));
		String searchButton1 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, "Search...");
		substring = adminLead.searchLeadAndUpdateIt(lead);
		System.out.println(substring + "{{{{{{{");
		adminLead.enterEamilId("abd" + UtilClass.randomNameGenerator(3) + "@gmail.com");
		leads.waitUntilEmailIdDisplay();
		String codeNone = leads.mobileNumberCode();
		Assert.assertEquals(codeNone, "--None--");
		leads.withoutSangType("Mobile Country Code, --None--", "United Arab Emirates(+971)");
		adminLead.setMobileNumber(UtilClass.generateRandomMobileNumber());
		leads.saveLeadInformation();
		String imagePresent = logoutUserFromSandBox.logoValidation();
		Assert.assertEquals(imagePresent, "User");
		logoutUserFromSandBox.logoutUser();
		login.loginToSandBox(ExcleReader.excleReader("Login", 2, 1), ExcleReader.excleReader("Login", 3, 1));
		String searchButton2 = adminLead.asserationForSerach();
		Assert.assertEquals(searchButton1, "Search...");
		adminLead.serchAndUpdateItData(lead);
		leads.leadStatusUpdate();
		String valueBeforSelectionLeadStatus = leads.inprocessLeadUpdate();
		Assert.assertEquals(valueBeforSelectionLeadStatus, "In Progress Lead");
		leads.qulifiedLeadUpdate2();
		String status = leads.leadStatusCheckItsConverted();
		Assert.assertEquals(status, "Converted Lead");
		adminLead.globalSearchLeadName(substring);
		System.out.println(substring + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}");
		leads.clickOnTheAccountLinkAfterGobalSearch();
		unitSel.accountClcikInOpp();
		String gender = unitSel.genderSelection();
		Assert.assertEquals(gender, "--None--");
		leads.withoutSangType("Gender, --None--", "Male");
		unitSel.addDetailsInAccounts("01/05/1789", "Date of Birth", "PersonBirthdate");
		leads.corrporateWelthName("Marital Status, --None--", "Single", "Marital Status");
		leads.corrporateWelthName("Residential Address same as Permanent?, --None--", "Yes",
				"Residential Address same as Permanent?");
		unitSel.addDetailsInAccounts("N/A", "Passport Type", "PassportType__pc");
		unitSel.addDetailsInAccounts("N/A", "Place of Issue", "PlaceofIssue__pc");
		unitSel.addDetailsInAccounts("01/05/1989", "Passport Issue Date", "PassportIssueDate__pc");
		unitSel.addDetailsInAccounts("01/05/1990", "Passport Expiry Date", "PassportExpiryDate__pc");
		unitSel.addDetailsInAccounts("N/A", "Passport Number", "PassportNumber__pc");
		leads.corrporateWelthName("Employment Status, --None--", "Unemployed", "Employment Status");
		unitSel.addressUpdate("N/A");
		unitSel.textAreaAddressInput("N/A");
		unitSel.setValuesInInputAddress("N/A", "postalCode");
		unitSel.setValuesInInputAddress("N/A", "city");
		String relationshipText = unitSel.saveInfo();
		Assert.assertEquals(relationshipText, "Relationships");
		unitSel.relationship();
		unitSel.uploadDocuments("ICA Verification", "1");
		unitSel.uploadDocuments("KYC Form", "2");
		unitSel.uploadDocuments("Others", "5");
		unitSel.uploadDocuments("VISA Copy", "8");
		adminLead.globalSearchLeadName(substring);
		unitSel.detailsInOpporties();
		Assert.assertEquals(unitSel.salesTypesText(), true);
		unitSel.dropdownFromDetailsHandle("Sale Type, --None--", "Land");
		unitSel.dropdownFromDetailsHandle("Deal Type, --None--", "Bulk");
		unitSel.dropdownFromDetailsHandle("Booking Type, --None--", "Online");
		unitSel.dropdownFromDetailsHandle("Agent Type, --None--", "Direct");
		unitSel.dropdownFromDetailsHandle("Delivery Method, --None--", "Email");
		unitSel.saveButton();
		adminLead.globalSearchLeadName(substring);
		unitSel.clickOnOpp();
		Assert.assertEquals(leads.unitSearch(),true);
		logoutUserFromSandBox.logoutUser();
	}
}
